package ${basePackage}.scaffolding;

import org.apache.commons.collections4.map.MultiKeyMap;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.lang.reflect.Method;
import java.util.Map;

@Controller
@RequestMapping()
public class RestfulController {
    private static final Logger LOG = LogManager.getLogger(RestfulController.class);

    @Autowired
    private ApplicationContext applicationContext;

    private static final MultiKeyMap<String, Method> methodCacheMap = new MultiKeyMap<>();

    @ResponseBody
    @RequestMapping("{serviceName}/{methodName}")
    public Object dispatch(@PathVariable("serviceName") String serviceName,
                           @PathVariable("methodName") String methodName,
                           @RequestParam Map<String, String> paramMap,
                           HttpServletRequest request, HttpServletResponse response) {

        LOG.debug("request, serviceName: {}, methodName: {}", serviceName, methodName);
        response.setHeader("P3P", "CP=CAO PSA OUR");
        //response.setContentType("application/json; charset=UTF-8");
        response.setHeader("Access-Control-Allow-Origin", "*");

        if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(methodName)) {
            return new RestfulResult(RestfulResultStatus.FAIL);
        }
        serviceName = serviceName.concat("Biz");
        Object currentService = getCurrentService(serviceName);
        if (currentService == null) {
            return new RestfulResult(RestfulResultStatus.FAIL);
        }

        Object currentMethod = getCurrentMethod(currentService, serviceName, methodName);
        if (currentMethod == null) {
            return new RestfulResult(RestfulResultStatus.FAIL);
        }
        return invokeMethod((Method) currentMethod, currentService, new RestfulParam(request, response, paramMap));

    }

    private Object getCurrentService(String serviceName) {
        try {
            return applicationContext.getBean(serviceName);
        } catch (NoSuchBeanDefinitionException e) {
            LOG.debug("get current bean exception: ", e);
            return null;
        }
    }

    private Object getCurrentMethod(Object currentService, String serviceName, String methodName) {
        Method currentMethod = methodCacheMap.get(serviceName, methodName);
        if (currentMethod == null) {
            // 暂时允许并发出现， 防止并发,如果使用String.iner做锁，将导致jvm永久带内存 增加
            try {
                currentMethod = currentService.getClass().getMethod(methodName, RestfulParam.class);
            } catch (Exception e) {
                LOG.debug("get current method exception: ", e);
            }
            methodCacheMap.put(serviceName, methodName, currentMethod);
        }
        return currentMethod;
    }

    private RestfulResult invokeMethod(Method method, Object object, RestfulParam restfulParam) {
        try {
            Object result = method.invoke(object, restfulParam);
            return new RestfulResult(RestfulResultStatus.SUCCESS, result);
        } catch (Exception e) {
            if (e.getCause() instanceof PrivilegeException) {
                return new RestfulResult(RestfulResultStatus.PRIVILEGE_EXCEPTION);
            } else {
                LOG.debug("invoke method exception: ", e);
                return new RestfulResult(RestfulResultStatus.FAIL);
            }
        }
    }


}
